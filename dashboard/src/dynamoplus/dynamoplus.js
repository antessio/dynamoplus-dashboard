export default {
    adminService: {
        login: async (username, password) => {
            const basicAuth = window.btoa(username + ':' + password);
            const response = await fetch(process.env.REACT_APP_API_BASE_PATH + "/admin/login", {
                headers: {
                    Authorization: `Basic ` + basicAuth
                },
                method: 'POST'
            });
            console.log(await response)
            return await response.token
        }
    },
    indexService: {
        Index: (collectionName, conditions, orderingKey) => {
            return {
                collection: {
                    name: collectionName
                },
                conditions: conditions,
                ...(orderingKey && {ordering_key: orderingKey})
            }
        },
        getIndexes: async (collectionName, token, startFrom, limit = 10) => {
            const queryParameters = {
                limit: limit,
                startFrom: startFrom
            }
            const esc = encodeURIComponent;
            const query = Object.keys(queryParameters)
                .filter(k => queryParameters[k])
                .map(k => esc(k) + '=' + esc(queryParameters[k]))
                .join('&');

            const queryString = query && query !== '' ? "?" + query : ""
            const response = await fetch(process.env.REACT_APP_API_BASE_PATH + "/dynamoplus/index/query" + queryString, {
                headers: {
                    Authorization: `Bearer ${token}`
                },
                method: 'POST',
                body: JSON.stringify(
                    {
                        matches: {
                            eq: {
                                field_name: "collection.name",
                                value: collectionName
                            }
                        }
                    }
                )

            });

            return await response.json();
        },
        createIndex: async (index, token) => {
            const response = await fetch(process.env.REACT_APP_API_BASE_PATH + "/dynamoplus/index", {
                headers: {
                    Authorization: `Bearer ${token}`
                },
                method: 'POST',
                body: JSON.stringify(index)

            });

            const responseData = await response.json();
        }
    },
    collectionService: {
        COLLECTION_ATTRIBUTE_CONSTRAITNS: {
            NULLABLE: "NULLABLE",
            NOT_NULL: "NOT_NULL"
        },
        COLLECTION_ATTRIBUTE_TYPE: {
            STRING: "STRING",
            OBJECT: "OBJECT",
            NUMBER: "NUMBER",
            DATE: "DATE",
            ARRAY: "ARRAY"
        },
        Collection: (name, idKey, orderingKey, autoGeneratedId, attributes = []) => {
            return {
                name: name,
                id_key: idKey,
                ...(orderingKey && {ordering: orderingKey}),
                ...(autoGeneratedId && {auto_generate_id: autoGeneratedId}),
                ...(attributes && {attributes: attributes})
            }
        },
        CollectionAttribute: (name, type, constraints) => {
            return {
                name: name,
                type: type,
                ...(constraints && {constraints: constraints})
            }
        },
        createCollection: async (collection, token) => {
            const response = await fetch(process.env.REACT_APP_API_BASE_PATH + "/dynamoplus/collection", {
                headers: {
                    Authorization: `Bearer ${token}`
                },
                method: 'POST',
                body: JSON.stringify(collection)

            });

            return await response.json();
        },
        getCollection: async (collectionName, token) => {
            const response = await fetch(process.env.REACT_APP_API_BASE_PATH + "/dynamoplus/collection/" + collectionName, {
                headers: {
                    Authorization: `Bearer ${token}`
                },
                method: 'GET'

            });
            return await response.json();
        },
        getAllCollections: async (token) => {
            const response = await fetch(process.env.REACT_APP_API_BASE_PATH + "/dynamoplus/collection", {
                headers: {
                    Authorization: `Bearer ${token}`
                },
                method: 'GET'

            });
            return await response.json();
        }
    },
    documentService: {
        Eq: (fieldName, fieldValue) => {
            return {
                eq: {
                    fieldName: fieldName,
                    value: fieldValue
                }
            }
        },
        Range: (fieldName, fromValue, toValue) => {
            return {
                range: {
                    fieldName: fieldName,
                    from: fromValue,
                    to: toValue
                }
            }
        },
        And: (predicates) => {
            return {
                "and": [
                    ...predicates
                ]

            }
        },
        getDocument: async (collectionName, id, token) => {
            const response = await fetch(process.env.REACT_APP_API_BASE_PATH + "/dynamoplus/" + collectionName + "/" + id, {
                headers: {
                    Authorization: `Bearer ${token}`
                },
                method: 'GET'
            });

            return await response.json();
        },
        getAllDocuments: async (collectionName, token, startFrom, limit = 10) => {
            const queryParameters = {
                limit: limit,
                startFrom: startFrom
            }
            const esc = encodeURIComponent;
            const query = Object.keys(queryParameters)
                .filter(k => queryParameters[k])
                .map(k => esc(k) + '=' + esc(queryParameters[k]))
                .join('&');

            const queryString = query && query !== '' ? "?" + query : ""
            const response = await fetch(process.env.REACT_APP_API_BASE_PATH + "/dynamoplus/" + collectionName + queryString, {
                headers: {
                    Authorization: `Bearer ${token}`
                },
                method: 'GET'
            });

            return await response.json();
        },
        createDocument: async (collectionName, document, token) => {
            const response = await fetch(process.env.REACT_APP_API_BASE_PATH + "/dynamoplus/" + collectionName, {
                headers: {
                    Authorization: `Bearer ${token}`
                },
                method: 'POST',
                body: JSON.stringify(document)

            });

            const responseData = await response.json();
        },
        updateDocument: async (collectionName, id, document, token) => {
            const response = await fetch(process.env.REACT_APP_API_BASE_PATH + "/dynamoplus/" + collectionName + "/" + id, {
                headers: {
                    Authorization: `Bearer ${token}`
                },
                method: 'PUT',
                body: JSON.stringify(document)

            });

            const responseData = await response.json();
        },
        deleteDocument: async (collectionName, id, token) => {
            const response = await fetch(process.env.REACT_APP_API_BASE_PATH + "/dynamoplus/" + collectionName + "/" + id, {
                headers: {
                    Authorization: `Bearer ${token}`
                },
                method: 'DELETE'

            });

            const responseData = await response.json();
        },
        query: async (collectionName, matches, token, startFrom, limit = 10) => {
            const queryParameters = {
                limit: limit,
                startFrom: startFrom
            }
            const esc = encodeURIComponent;
            const query = Object.keys(queryParameters)
                .filter(k => queryParameters[k])
                .map(k => esc(k) + '=' + esc(queryParameters[k]))
                .join('&');

            const queryString = query && query !== '' ? "?" + query : ""
            const response = await fetch(process.env.REACT_APP_API_BASE_PATH + "/dynamoplus/" + collectionName + "/query" + queryString, {
                    headers: {
                        Authorization: `Bearer ${token}`
                    },
                    method: 'POST',
                    body: JSON.stringify(matches)
                }
            );
            return await response.json();
        }
    }
}


